/*	This file ReadVASPPotential.h is part of elephon.
 *
 *  elephon is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  elephon is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with elephon.  If not, see <http://www.gnu.org/licenses/>.
 *
 *  Created on: Apr 26, 2018
 *      Author: A. Linscheid
 */

#ifndef ELEPHON_IOMETHODS_READVASPPOTENTIAL_H_
#define ELEPHON_IOMETHODS_READVASPPOTENTIAL_H_

#include <string>
#include <array>
#include <vector>

namespace elephon
{
namespace IOMethods
{

/**
 * A class that reads the LOCPOT_AE file that is generated by the elphon_interface in vasp.
 */
class ReadVASPPotential
{
public:

	/**
	 * Tell the class the full path to the file
	 * @param[in] filepath
	 */
	void set_filepath(std::string filepath);

	/**
	 * Specify the default file name to be appended to the path where the data sits.
	 * @return default filename, e.g. 'LOCPOT_AE'
	 */
	std::string const & get_default_filename() const;

	/**
	 * Read the potential file and reset and initialize the data.
	 *
	 * @param[out] regularGridDim			Dimension of the regular grid for the real space grid of the auxiliary potential
	 * @param[out] regularData				The data of the auxiliary potential in p(x,y,z) in z major layout with x running the fastest.
	 * 										The layout is actually determined by the elephon_interface. When in doubt check there.
	 * @param[out] angularLMaxPerAtom		The angular moment up to which data is stored in the spherical harmonic expansion for each atom.
	 * @param[out] radialPointsPerAtom		Array with the radial points in units of Angstrom for each atom
	 * @param[out] radiusPerAtom			The radius of radial grid each atom in Angstrom
	 * @param[out] centerAtom				The center of each radial grid in units of the lattice basis vectors
	 * @param[out] namesAtom				The chemical symbol of any atom
	 * @param[out] massAtom					The ionic mass of any atom
	 * @param[out] radialData				The expansion coefficients for each atom of the valence density Hartree potential plus
	 * 										valence- plus frozen core density exchange correlation potential
	 * 										\f$ v_{\rm H}[n_v](\boldsymbol{r}) + v_{\rm xc}[n_v+n_c](\boldsymbol{r})\f$
	 * 										in terms of real spherical harmonics (the data is thus real). The layout is radial indices as the fastest
	 * 										running for each l,m channel as defined by Auxillary::memlayout::angular_momentum_layout().
	 * @param[out] coreChargeZ				Proton number of the core of each atom
	 * @param[out] frozenCoreElectronChg	For each atom the spherical frozen core charge \f$ n_c(\vert \boldsymbol{r}\vert) / \vert \boldsymbol{r}^2\vert \f$
	 * 										on the radial grid. Units are electrons/volume / Angstrom^2
	 */
	template<class VTReg, class VTRad, class VTChg>
	void read_potential_file(
			std::array<int,3> & regularGridDim,
			VTReg & regularData,
			std::vector<int> & angularLMaxPerAtom,
			std::vector<std::vector<double>> & radialPointsPerAtom,
			std::vector<double> & radiusPerAtom,
			std::vector<std::array<double,3>> & centerAtom,
			std::vector<std::string> & namesAtom,
			std::vector<double> & massAtom,
			std::vector<VTRad> & radialData,
			std::vector<double> & coreChargeZ,
			std::vector<VTChg> & frozenCoreElectronChg) const;
private:
	std::string defaultFileName_ = "LOCPOT_AE";

	std::string filepath_;
};

} /* namespace IOMethods */
} /* namespace elephon */

#include "IOMethods/ReadVASPPotential.hpp"
#endif /* ELEPHON_IOMETHODS_READVASPPOTENTIAL_H_ */
